type Auction {
  id: ID!
  product: Product
  startingBid: String
  bidIncrements: String
  startDate: String
  endDate: String
  published: Boolean
}

input AuctionCreateInput {
  product: ProductInput
  startingBid: String
  bidIncrements: String
  startDate: String
  endDate: String
  published: Boolean
}

input AuctionUpdateInput {
  id: ID!
  product: ProductInput
  startingBid: String
  bidIncrements: String
  startDate: String
  endDate: String
  published: Boolean
}

type FulfillmentService {
  id: ID!
  inventoryManagement: Boolean
  productBased: Boolean
  serviceName: String
  type: FulfillmentServiceType!
}

input FulfillmentServiceInput {
  id: ID!
  inventoryManagement: Boolean
  productBased: Boolean
  serviceName: String
  type: FulfillmentServiceType!
}

enum FulfillmentServiceType {
  GIFT_CARD
  MANUAL
  THIRD_PARTY
}

scalar DateTime

type deletedAuctionId {
  deletedAuctionId: ID
}

type deletedAuctionIds {
  deletedAuctionIds: [ID]!
}

scalar HTML

type Image {
  altText: String
  id: ID!
  originalSrc: String
}

input ImageInput {
  altText: String
  id: ID!
  originalSrc: String
}

type InventoryItem {
  id: ID!
}

input InventoryItemInput {
  id: ID!
}

scalar Money

type Product {
  availablePublicationCount: Int!
  createdAt: DateTime!
  descriptionHtml: HTML!
  handle: String!
  hasOnlyDefaultVariant: Boolean!
  id: ID!
  images: [Image]!
  options: [ProductOption!]!
  productType: String!
  publishedAt: DateTime
  tags: [String!]!
  templateSuffix: String
  title: String!
  totalInventory: Int!
  tracksInventory: Boolean!
  updatedAt: DateTime!
  variants: [ProductVariant]!
  vendor: String!
}

input ProductInput {
  availablePublicationCount: Int!
  createdAt: DateTime!
  descriptionHtml: HTML!
  handle: String!
  hasOnlyDefaultVariant: Boolean!
  id: ID!
  images: [ImageInput]!
  options: [ProductOptionInput!]!
  productType: String!
  publishedAt: DateTime
  tags: [String!]!
  templateSuffix: String
  title: String!
  totalInventory: Int!
  tracksInventory: Boolean!
  updatedAt: DateTime!
  variants: [ProductVariantInput]!
  vendor: String!
}

type ProductOption {
  id: ID!
  name: String
  position: Int
  values: [String]
}

input ProductOptionInput {
  id: ID!
  name: String
  position: Int
  values: [String]
}

type ProductVariant {
  availableForSale: Boolean!
  barcode: String
  compareAtPrice: Money
  createdAt: DateTime!
  displayName: String!
  fulfillmentService: FulfillmentService
  id: ID!
  image: Image
  inventoryItem: InventoryItem!
  inventoryManagement: ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")
  inventoryPolicy: ProductVariantInventoryPolicy!
  inventoryQuantity: Int
  position: Int!
  price: Money!
  product: VariantProduct!
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")
  selectedOptions: [SelectedOption!]!
  sku: String
  taxable: Boolean!
  title: String!
  updatedAt: DateTime!
  weight: Float
  weightUnit: WeightUnit!
}

input ProductVariantInput {
  availableForSale: Boolean!
  barcode: String
  compareAtPrice: Money
  createdAt: DateTime!
  displayName: String!
  fulfillmentService: FulfillmentServiceInput
  id: ID!
  image: ImageInput
  inventoryItem: InventoryItemInput!
  inventoryManagement: ProductVariantInventoryManagement!
  inventoryPolicy: ProductVariantInventoryPolicy!
  inventoryQuantity: Int
  position: Int!
  price: Money!
  product: VariantProductInput!
  requiresShipping: Boolean!
  selectedOptions: [SelectedOptionInput!]!
  sku: String
  taxable: Boolean!
  title: String!
  updatedAt: DateTime!
  weight: Float
  weightUnit: WeightUnit!
}

enum ProductVariantInventoryManagement {
  SHOPIFY
  NOT_MANAGED
  FULFILLMENT_SERVICE
}

enum ProductVariantInventoryPolicy {
  DENY
  CONTINUE
}

type PublishedAuction {
  auctionId: ID!
  published: Boolean
}

type SelectedOption {
  value: String
}

input SelectedOptionInput {
  value: String
}

type VariantProduct {
  id: ID!
}

input VariantProductInput {
  id: ID!
}

enum WeightUnit {
  KILOGRAMS
  GRAMS
  POUNDS
  OUNCES
}

type Mutation {
  createAuction(input: AuctionCreateInput!): Auction!
  updateAuction(input: AuctionUpdateInput!): Auction!
  deleteAuction(auctionId: ID!): deletedAuctionId!
  deleteAuctions(auctionIds: [ID]!): deletedAuctionIds!
  publishAuction(auctionId: ID!): PublishedAuction!
}

type Query {
  auctions: [Auction]!
  auction(id: ID!): Auction
  hello: String!
}

schema {
  query: Query
  mutation: Mutation
}
